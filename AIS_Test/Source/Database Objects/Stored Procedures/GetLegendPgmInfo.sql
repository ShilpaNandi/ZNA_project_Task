
IF EXISTS (SELECT 1 FROM sysobjects 
	WHERE NAME = 'GetLegendPgmInfo' and TYPE = 'P')
	DROP PROC GetLegendPgmInfo
GO
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO

---------------------------------------------------------------------
-----
-----	PROC NAME:		GetLegendPgmInfo
-----
-----	VERSION:		SQL SERVER 2005
-----
-----	AUTHOR :		SUNEEL KUMAR MOGALI
-----
-----	DESCRIPTION:	RETURNS DATA WITH RESPECT TO THE GIVEN INVOICE NUMBER.
-----			
-----	ON EXIT:	
-----			
-----
-----	MODIFIED:	
-----			
----- 
---------------------------------------------------------------------

CREATE PROCEDURE [dbo].[GetLegendPgmInfo]
@ADJNO INT,
@FLAG INT,
@HISTFLAG BIT
AS
BEGIN

-- SET NOCOUNT ON added to prevent extra result sets from interfering with SELECT statements.
SET NOCOUNT ON;

--declare @status bit
--set @status = dbo.fn_GetPremDescrToShow(@ADJNO,PREM_ADJ_PERD.PREM_ADJ_PERD_ID)

BEGIN TRY

SELECT CASE @FLAG WHEN 1 THEN PREM_ADJ.DRFT_INVC_NBR_TXT 
WHEN 2 THEN PREM_ADJ.FNL_INVC_NBR_TXT 
ELSE PREM_ADJ.DRFT_INVC_NBR_TXT END "INVOICE NUMBER",
PREM_ADJ.FNL_INVC_DT "FINAL DATE",
CASE @FLAG WHEN 1 THEN CONVERT(NVARCHAR(30), DRFT_INVC_DT,101)
 WHEN 2 THEN CONVERT(NVARCHAR(30), FNL_INVC_DT,101)
ELSE  CONVERT(NVARCHAR(30), DRFT_INVC_DT,101) END "INVOICE DATE",
CONVERT(NVARCHAR(30), PREM_ADJ_PGM.STRT_DT, 101) + '-' + CONVERT(NVARCHAR(30), PREM_ADJ_PGM.PLAN_END_DT,101) "PROGRAM PERIOD",
CONVERT(NVARCHAR(30), PREM_ADJ.VALN_DT, 101) "VALUATION DATE",
CUSTMR.FULL_NM "INSURED NAME",
--INT_ORG.FULL_NAME+'/'+INT_ORG.CITY_NM "BU/OFFICE", 
PREM_ADJ_PGM.BRKR_ID "BROKER ID",
EXTRNL_ORG.FULL_NAME "BROKER",
LKUP4.LKUP_TXT  "ADJUSTMENT TYPE",
PREM_ADJ_PERD.ADJ_NBR_TXT "ADJUSTMENT NUMBER",
PREM_ADJ_PGM.PREV_VALN_DT "PREV VAL DATE",
PREM_ADJ_PGM.NXT_VALN_DT "NEXT VAL DATE",
PREM_ADJ_PERD.PREM_ADJ_PERD_ID "PREM ADJ PERD ID",
PREM_ADJ.PREM_ADJ_ID "PREM ADJ ID",
PREM_ADJ_PGM.PREM_ADJ_PGM_ID "PREM ADJ PGM ID",
COML_AGMT.POL_SYM_TXT+' '+RTRIM(COML_AGMT.POL_NBR_TXT)+'-'+COML_AGMT.POL_MODULUS_TXT "POLICY NUMBERS",
PREM_ADJ_PGM.PGM_TYP_ID "PGM TYP ID",
LKUP.LKUP_TXT "PGM TYP",
CASE PREM_ADJ_PGM.INCUR_CONV_MMS_CNT
WHEN NULL THEN 'NOT APPLICABLE' 
WHEN '' THEN 'NOT APPLICABLE'
WHEN 0 THEN 'NOT APPLICABLE'
ELSE
CONVERT(VARCHAR,(
CASE
WHEN DAY(DATEADD(MONTH, PREM_ADJ_PGM.INCUR_CONV_MMS_CNT, PREM_ADJ_PGM.STRT_DT))>15 THEN DATEADD(DAY, -1, DATEADD(MONTH, 1, DATEADD(DAY, 1 - DAY(DATEADD(MONTH, PREM_ADJ_PGM.INCUR_CONV_MMS_CNT, PREM_ADJ_PGM.STRT_DT)), DATEADD(MONTH, PREM_ADJ_PGM.INCUR_CONV_MMS_CNT, PREM_ADJ_PGM.STRT_DT)))) 
ELSE DATEADD(DAY, -1, DATEADD(MONTH, 0, DATEADD(DAY, 1 - DAY(DATEADD(MONTH, PREM_ADJ_PGM.INCUR_CONV_MMS_CNT, PREM_ADJ_PGM.STRT_DT)), DATEADD(MONTH, PREM_ADJ_PGM.INCUR_CONV_MMS_CNT, PREM_ADJ_PGM.STRT_DT)))) END),101)
 END "CONV DATE",
COML_AGMT.DEDTBL_POL_LIM_AMT "LOSS LIMIT",
COML_AGMT.UNLIM_DEDTBL_POL_LIM_IND "UNLIM IND",
COML_AGMT.ALOC_LOS_ADJ_EXPS_TYP_ID "ALAE ID",
LKUP1.LKUP_TXT "ALAE",
COML_AGMT.LOS_SYS_SRC_ID "LOSS SOURCE ID",
LKUP2.LKUP_TXT "LOSS SOURCE",
CONVERT(NVARCHAR(30),COML_AGMT_AUDT.STRT_DT,101) "AUDIT DATE",
COML_AGMT_AUDT.EXPO_AMT "AUD EXPO INCL ADJ",
COML_AGMT_AUDT.SUBJ_AUDT_PREM_AMT "AUD STD SUB PREM",
NON_SUBJ_PREM_AUDT.NSA_TYP_ID "NSA TYP ID",
dbo.fn_GetPremDescrToShow(CUSTMR.CUSTMR_ID,PREM_ADJ_PGM.PREM_ADJ_PGM_ID,COML_AGMT.COML_AGMT_ID) "STATUS",
LKUP3.ATTR_1_TXT "AUD NON SUB PREM DESCR",
COML_AGMT_AUDT.COML_AGMT_ID "COML AGMT ID",
NON_SUBJ_PREM_AUDT.NON_SUBJ_AUDT_PREM_AMT "AUD NON SUBJ PREM",
COML_AGMT_AUDT.SUBJ_AUDT_PREM_AMT+COML_AGMT_AUDT.NON_SUBJ_AUDT_PREM_AMT "AUD EAR PREM TOT",
COML_AGMT_AUDT.AUDT_RSLT_AMT "AUDIT RESULT",
COML_AGMT_AUDT.SUBJ_DEPST_PREM_AMT "STD SUBJ PREM DEP",
COML_AGMT_AUDT.DEFR_DEPST_PREM_AMT "STD SUBJ PREM DEFERRED",
COML_AGMT_AUDT.NON_SUBJ_DEPST_PREM_AMT "NON SUB PREM DEPOS",
COML_AGMT_AUDT.SUBJ_DEPST_PREM_AMT+COML_AGMT_AUDT.DEFR_DEPST_PREM_AMT+COML_AGMT_AUDT.NON_SUBJ_DEPST_PREM_AMT "TOTAL ESTIMATED POL PREM",
AUD."T AUD EXPO INCL ADJ",
AUD."T AUD STD SUB PREM",
AUD."T AUD NON SUBJ PREM",
AUD."T AUD EAR PREM TOT",
AUD."T AUDIT RESULT",
AUD."T STD SUBJ PREM DEP",
AUD."T STD SUBJ PREM DEFERRED",
AUD."T NON SUB PREM DEPOS",
AUD."T TOTAL ESTIMATED POL PREM"

FROM PREM_ADJ 
INNER JOIN PREM_ADJ_PGM ON PREM_ADJ_PGM.ACTV_IND = 1 
INNER JOIN PREM_ADJ_PERD ON PREM_ADJ_PERD.PREM_ADJ_ID = PREM_ADJ.PREM_ADJ_ID
AND PREM_ADJ_PERD.PREM_ADJ_PGM_ID = PREM_ADJ_PGM.PREM_ADJ_PGM_ID
INNER JOIN CUSTMR ON PREM_ADJ_PERD.CUSTMR_ID = CUSTMR.CUSTMR_ID 
INNER JOIN EXTRNL_ORG ON EXTRNL_ORG.EXTRNL_ORG_ID = PREM_ADJ_PGM.BRKR_ID
--INNER JOIN INT_ORG ON INT_ORG.INT_ORG_ID = PREM_ADJ_PGM.BSN_UNT_OFC_ID
INNER JOIN PREM_ADJ_PGM_STS ON PREM_ADJ_PGM_STS.PREM_ADJ_PGM_ID = PREM_ADJ_PGM.PREM_ADJ_PGM_ID
AND PREM_ADJ_PGM_STS.PGM_PERD_STS_TYP_ID = 342 AND PREM_ADJ_PGM_STS.STS_CHK_IND = 1
INNER JOIN LKUP ON LKUP.LKUP_ID = PREM_ADJ_PGM.PGM_TYP_ID
INNER JOIN PREM_ADJ_RETRO ON PREM_ADJ_RETRO.PREM_ADJ_ID = PREM_ADJ_PERD.PREM_ADJ_ID
AND PREM_ADJ_RETRO.PREM_ADJ_PGM_ID = PREM_ADJ_PERD.PREM_ADJ_PGM_ID
INNER JOIN COML_AGMT ON COML_AGMT.PREM_ADJ_PGM_ID = PREM_ADJ_PGM.PREM_ADJ_PGM_ID
AND COML_AGMT.CUSTMR_ID = CUSTMR.CUSTMR_ID AND COML_AGMT.ACTV_IND = 1
AND COML_AGMT.COML_AGMT_ID = PREM_ADJ_RETRO.COML_AGMT_ID
LEFT OUTER JOIN LKUP LKUP1 ON LKUP1.LKUP_ID = COML_AGMT.ALOC_LOS_ADJ_EXPS_TYP_ID
LEFT OUTER JOIN LKUP LKUP2 ON LKUP2.LKUP_ID = COML_AGMT.LOS_SYS_SRC_ID
INNER JOIN COML_AGMT_AUDT ON COML_AGMT_AUDT.COML_AGMT_ID = COML_AGMT.COML_AGMT_ID
AND COML_AGMT_AUDT.PREM_ADJ_PGM_ID = PREM_ADJ_PGM.PREM_ADJ_PGM_ID
AND COML_AGMT_AUDT.CUSTMR_ID = CUSTMR.CUSTMR_ID
LEFT OUTER JOIN NON_SUBJ_PREM_AUDT ON NON_SUBJ_PREM_AUDT.COML_AGMT_AUDT_ID = COML_AGMT_AUDT.COML_AGMT_AUDT_ID
AND NON_SUBJ_PREM_AUDT.COML_AGMT_ID = COML_AGMT.COML_AGMT_ID
AND NON_SUBJ_PREM_AUDT.PREM_ADJ_PGM_ID = PREM_ADJ_PGM.PREM_ADJ_PGM_ID
AND NON_SUBJ_PREM_AUDT.CUSTMR_ID = CUSTMR.CUSTMR_ID
AND NON_SUBJ_PREM_AUDT.ACTV_IND = 1
LEFT OUTER JOIN LKUP LKUP3 ON LKUP3.LKUP_ID = NON_SUBJ_PREM_AUDT.NSA_TYP_ID
INNER JOIN LKUP LKUP4 ON LKUP4.LKUP_ID = PREM_ADJ_PGM.PAID_INCUR_TYP_ID
OUTER APPLY dbo.fn_GetTotOfAuditPrem(PREM_ADJ_PERD.CUSTMR_ID,PREM_ADJ_PGM.PREM_ADJ_PGM_ID,PREM_ADJ_RETRO.PREM_ADJ_ID,COML_AGMT.COML_AGMT_ID) AS AUD
INNER JOIN LKUP PGMTYP ON PGMTYP.LKUP_ID = PREM_ADJ_PGM.PGM_TYP_ID
 WHERE PREM_ADJ.PREM_ADJ_ID =  @ADJNO 
AND (COML_AGMT_AUDT.AUDT_REVD_STS_IND = 0 OR COML_AGMT_AUDT.AUDT_REVD_STS_IND IS NULL)
AND COML_AGMT.ADJ_TYP_ID NOT IN (69,64,68,62,448)
GROUP BY COML_AGMT_AUDT.COML_AGMT_ID,PREM_ADJ.DRFT_INVC_NBR_TXT,PREM_ADJ.FNL_INVC_NBR_TXT,
PREM_ADJ.FNL_INVC_DT,DRFT_INVC_DT,PREM_ADJ_PGM.STRT_DT,PREM_ADJ_PGM.PLAN_END_DT,
PREM_ADJ.VALN_DT,CUSTMR.FULL_NM,PREM_ADJ_PGM.BRKR_ID,PGMTYP.LKUP_TXT,
LKUP4.LKUP_TXT,EXTRNL_ORG.FULL_NAME,PREM_ADJ_PERD.ADJ_NBR_TXT,PREM_ADJ_PGM.PREV_VALN_DT,
PREM_ADJ_PGM.NXT_VALN_DT,PREM_ADJ_PERD.PREM_ADJ_PERD_ID,PREM_ADJ.PREM_ADJ_ID,PREM_ADJ_PGM.PREM_ADJ_PGM_ID,
COML_AGMT.POL_SYM_TXT,COML_AGMT.POL_NBR_TXT,COML_AGMT.POL_MODULUS_TXT,PREM_ADJ_PGM.PGM_TYP_ID,
LKUP.LKUP_TXT,LKUP4.LKUP_TXT,PREM_ADJ_PGM.INCUR_CONV_MMS_CNT,PREM_ADJ_PGM.STRT_DT,
COML_AGMT.DEDTBL_POL_LIM_AMT,COML_AGMT.UNLIM_DEDTBL_POL_LIM_IND,COML_AGMT.ALOC_LOS_ADJ_EXPS_TYP_ID,
LKUP1.LKUP_TXT,COML_AGMT.LOS_SYS_SRC_ID,LKUP2.LKUP_TXT,COML_AGMT_AUDT.STRT_DT,
COML_AGMT_AUDT.EXPO_AMT,COML_AGMT_AUDT.SUBJ_AUDT_PREM_AMT,NON_SUBJ_PREM_AUDT.NSA_TYP_ID,
PREM_ADJ_PERD.PREM_ADJ_PERD_ID,LKUP3.ATTR_1_TXT,NON_SUBJ_PREM_AUDT.NON_SUBJ_AUDT_PREM_AMT,
COML_AGMT_AUDT.SUBJ_AUDT_PREM_AMT,COML_AGMT_AUDT.NON_SUBJ_AUDT_PREM_AMT,COML_AGMT.COML_AGMT_ID,
COML_AGMT_AUDT.AUDT_RSLT_AMT,COML_AGMT_AUDT.SUBJ_DEPST_PREM_AMT,CUSTMR.CUSTMR_ID,
COML_AGMT_AUDT.DEFR_DEPST_PREM_AMT,COML_AGMT_AUDT.NON_SUBJ_DEPST_PREM_AMT,
COML_AGMT_AUDT.SUBJ_DEPST_PREM_AMT,COML_AGMT_AUDT.DEFR_DEPST_PREM_AMT,
COML_AGMT_AUDT.NON_SUBJ_DEPST_PREM_AMT,AUD."T AUD EXPO INCL ADJ",
AUD."T AUD STD SUB PREM",
AUD."T AUD NON SUBJ PREM",
AUD."T AUD EAR PREM TOT",
AUD."T AUDIT RESULT",
AUD."T STD SUBJ PREM DEP",
AUD."T STD SUBJ PREM DEFERRED",
AUD."T NON SUB PREM DEPOS",
AUD."T TOTAL ESTIMATED POL PREM"
ORDER BY COML_AGMT_AUDT.COML_AGMT_ID






END TRY
BEGIN CATCH

 
 SELECT 
    ERROR_NUMBER() AS ERRORNUMBER,
    ERROR_SEVERITY() AS ERRORSEVERITY,
    ERROR_STATE() AS ERRORSTATE,
    ERROR_PROCEDURE() AS ERRORPROCEDURE,
    ERROR_LINE() AS ERRORLINE,
    ERROR_MESSAGE() AS ERRORMESSAGE;


END CATCH
END


GO

IF OBJECT_ID('GetLegendPgmInfo') IS NOT NULL
	PRINT 'CREATED PROCEDURE GetLegendPgmInfo'
ELSE
	PRINT 'FAILED CREATING PROCEDURE GetLegendPgmInfo'
GO

IF OBJECT_ID('GetLegendPgmInfo') IS NOT NULL
	GRANT EXEC ON GetLegendPgmInfo TO PUBLIC
GO










